#Кейс-Задача №5
#более подробно кейс задача №5 реализованна в виде описания проекта:
#README.md
#Условие:
#Провести аналитический обзор одной из кейс-задач по критериям: функциональность, производительность, безопасность, масштабируемость.

#Решение:
#Сформировать и описать аналитический обзор проделанной работы в одной из кейс-задач, по следующим критериям:  
- Функциональность  
- Производительность  
- Безопасность  
- Масштабируемость  
- Сопровождаемость  
- Переносимость  
- Качество кода  
- Тестирование  
## Аналитический обзор кейс-задачи №4  
**Выбранная задача:** Веб-приложение "Система бронирования туров".  

### 1. Функциональность  
- **Плюсы:**  
  - Поддержка `GET /tours` для получения данных.  
  - Использование PostgreSQL для хранения данных.  
- **Минусы:**  
  - Отсутствие методов `POST/PUT/DELETE` для полного цикла бронирования.  
- **Предложения:**  
  - Добавить метод `POST /bookings` для создания бронирований.  

### 2. Производительность  
- **Плюсы:**  
  - Flask обеспечивает быстрый старт проекта.  
  - PostgreSQL оптимизирует работу с данными.  
- **Минусы:**  
  - ORM (SQLAlchemy) может замедлять выполнение сложных запросов.  
- **Предложения:**  
  - Использовать `asyncpg` для асинхронной работы с БД.  

### 3. Безопасность  
- **Плюсы:**  
  - Использование ORM снижает риск SQL-инъекций.  
- **Минусы:**  
  - Нет шифрования данных.  
- **Предложения:**  
  - Включить HTTPS.  
  - Добавить защиту от DDoS (например, через Cloudflare).  

### 4. Масштабируемость  
- **Плюсы:**  
  - Архитектура REST API позволяет легко добавлять новые сервисы.  
- **Минусы:**  
  - Нет описания масштабирования.  
- **Предложения:**  
  - Использовать Docker для контейнеризации.  
  - Добавить Redis для кэширования.  

### 5. Сопровождаемость  
- **Плюсы:**  
  - Четкая структура кода.  
- **Минусы:**  
  - Нет документации.  
- **Предложения:**  
  - Добавить `docs/` с описанием API.  
  - Использовать `Flask-RESTPlus` для автоматической генерации документации.  

### 6. Переносимость  
- **Плюсы:**  
  - Код работает на любой ОС с Python и PostgreSQL.  
- **Минусы:**  
  - Нет скриптов для автоматического развертывания.  
- **Предложения:**  
  - Добавить `Dockerfile` для упрощения развёртывания.  

### 7. Качество кода  
- **Плюсы:**  
  - Код соответствует PEP8.  
  - Использование контекстного менеджера Flask (`with app.app_context()`).  
- **Минусы:**  
  - Нет типизации.  
- **Предложения:**  
  - Добавить `type hints`.  
  - Использовать `mypy` для проверки типов.  

### 8. Тестирование  
- **Плюсы:**  
  - Ручное тестирование через `requests`.  
- **Минусы:**  
  - Нет автоматических тестов.  
- **Предложения:**  
  - Добавить `pytest` и примеры тестов.  
  - Использовать `unittest` для проверки маршрутов.  

 Объяснение выбора Python вместо Delphi 10.2:
"Для реализации веб-приложения выбран Python (Flask) и PostgreSQL, так как эти технологии свободны в использовании и имеют низкий порог входа. 
Архитектура аналогична REST API, а PostgreSQL обеспечивает те же функции, что и MS SQL Server.
Выбранный стек лучше соответствует направлению «Искусственный интеллект и большие данные» (например, интеграция с pandas, scikit-learn, TensorFlow)." 

**Выводы:**  
- Все ключевые элементы реализованы: База данных (PostgreSQL), REST API (Flask), интерфейс (HTML/JS).  
- Выбор Python вместо Delphi 10.2 оправдан простотой освоения и возможностью интеграции с ML.  
- Предложения по улучшению: добавить аутентификацию, бронирование туров, Docker, автоматические тесты.  
