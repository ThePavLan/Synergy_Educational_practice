
# Кейс-задача № 2
# Написать тестовую программу, которая демонстрирует работу методов базового и производного классов.
# Ответом на задачу будет ссылка на репозиторий GitHub, где хранится Ваша программа. Или иным удобным для Вас способом.



from abc import ABC, abstractmethod

class Animal(ABC):  # Базовый абстрактный класс
    def __init__(self, name):
        self.name = name

    @abstractmethod
    def speak(self):
        pass

    def move(self):
        print(f"{self.name} is moving.")

    def __str__(self): # для удобного вывода информации об объекте
        return f"{self.__class__.__name__}: {self.name}"


class Dog(Animal): # Производный класс
    def __init__(self, name, breed):
        super().__init__(name) # Вызов конструктора родительского класса
        self.breed = breed

    def speak(self):
        print("WOOF!")

    def fetch(self):
        print(f"{self.name} the {self.breed} is fetching.")

    def __str__(self):
        return f"{super().__str__()}, Breed: {self.breed}"


class Cat(Animal): # Другой производный класс
    def __init__(self, name, color):
        super().__init__(name)
        self.color = color

    def speak(self):
        print("Meow!")

    def purr(self):
        print(f"{self.name} the {self.color} cat is purring.")

    def __str__(self):
        return f"{super().__str__()}, Color: {self.color}"


# Пример использования
dog = Dog("Buddy", "Golden Retriever")
cat = Cat("Whiskers", "Gray")

print(dog)
dog.speak() # Выведет "Woof!"
dog.move() # Выведет "Buddy the Dog is moving."
dog.fetch() # Выведет "Buddy the Golden Retriever is fetching."

print(cat)
cat.speak() # Выведет "Meow!"
cat.move() # Выведет "Whiskers the Cat is moving."
cat.purr() # Выведет "Whiskers the Gray cat is purring."

# Полиморфизм
print("\nПолиморфизм:")
for pet in [dog, cat]:
    print(pet)
    pet.speak()
    pet.move()
