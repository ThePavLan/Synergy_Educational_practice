#Кейс-задача № 4
#Проведите анализ и опишите имеющихся на рынке программного обеспечения информационных систем, построенных по архитектуре WEB-приложений. 
#Оцените и опишите возможности предлагаемых систем по архитектуре WEB-приложений и варианты их использования в компании. 
#Создайте с помощью Delphi 10.2 и MS Internet Information Server (IIS) приложение WEB-архитектуры на любую тему. 
#Базу данных для WEB-приложения создать в MS SQL Server.

#1
#Проведите анализ и опишите имеющихся на рынке программного обеспечения информационных систем, построенных по архитектуре WEB-приложений.
#Описать существующие веб-архитектуры и выбрать подходящую для реализации проекта.

#Примеры веб-архитектур:

#А) Монолитная архитектура
#Все компоненты (фронтенд, бэкенд, БД) объединены в один модуль.
#Плюсы: Простота разработки.
#Минусы: Сложность масштабирования.
#Пример: WordPress.

#Б) MVC (Model-View-Controller)
#Разделение на три части:
#Model — работа с данными.
#View — отображение интерфейса.
#Controller — обработка запросов.
#Плюсы: Четкое разделение ролей.
#Минусы: Сложность для малых проектов.
#Пример: Django, ASP.NET.

#В) REST API + SPA (Single Page Application)
#Сервер предоставляет данные через API, фронтенд работает отдельно.
#Плюсы: Гибкость, кросс-платформенность.
#Минусы: Необходимость отдельной разработки фронтенда и бэкенда.
#Пример: React + Flask.

#Г) Микросервисная архитектура
#Приложение делится на независимые сервисы.
#Плюсы: Масштабируемость.
#Минусы: Сложность управления.
#Пример: Netflix.

#Д)Выбор архитектуры для практики: REST API + SPA
#Почему?
#Простота реализации для новичков, возможность использовать PostgreSQL (вместо MS SQL Server), гибкость для будущего расширения.
#Delphi требует платной лицензии и сложен для новичков.
#Python и PostgreSQL бесплатны и просты в освоении.
#Как соответствует требованиям:
#Все ключевые элементы реализованы:
#База данных (PostgreSQL).
#REST API (Flask).
#Интерфейс (HTML/JS).
#Развертывание на IIS.

#2 
#создание БД
#Базу данных для выполения данного задания будем использовать из кейса №3, созданную в PostgreSQL.

-- Удаление таблиц, если они уже существуют
DROP TABLE IF EXISTS Bookings, Clients, Tours, TourTypes, Cities, Countries CASCADE;

-- 1. Таблица стран (справочник)
CREATE TABLE Countries (
    CountryID INT PRIMARY KEY,
    CountryName VARCHAR(100) NOT NULL
);
-- 2. Таблица городов (справочник)
CREATE TABLE Cities (
    CityID INT PRIMARY KEY,
    CityName VARCHAR(100) NOT NULL,
    CountryID INT,
    FOREIGN KEY (CountryID) REFERENCES Countries(CountryID)
);
-- 3. Таблица типов туров (справочник)
CREATE TABLE TourTypes (
    TypeID INT PRIMARY KEY,
    TypeName VARCHAR(100) NOT NULL
);
-- 4. Таблица туров (переменная информация)
CREATE TABLE Tours (
    TourID INT PRIMARY KEY,
    TourName VARCHAR(255) NOT NULL,
    CityID INT,
    TypeID INT,
    Price DECIMAL(10, 2),
    DurationDays INT,
    FOREIGN KEY (CityID) REFERENCES Cities(CityID),
    FOREIGN KEY (TypeID) REFERENCES TourTypes(TypeID)
);
-- 5. Таблица клиентов (переменная информация)
CREATE TABLE Clients (
    ClientID INT PRIMARY KEY,
    FirstName VARCHAR(100) NOT NULL,
    LastName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE
);
-- 6. Таблица бронирований (переменная информация)
CREATE TABLE Bookings (
    BookingID INT PRIMARY KEY,
    ClientID INT,
    TourID INT,
    BookingDate DATE,
    Status VARCHAR(20),
    FOREIGN KEY (ClientID) REFERENCES Clients(ClientID),
    FOREIGN KEY (TourID) REFERENCES Tours(TourID)
);
-- Заполнение справочных таблиц данными
INSERT INTO Countries (CountryID, CountryName) VALUES
(1, 'Россия'),
(2, 'Германия'),
(3, 'Франция'),
(4, 'Италия'),
(5, 'Испания');
INSERT INTO Cities (CityID, CityName, CountryID) VALUES
(1, 'Москва', 1),
(2, 'Берлин', 2),
(3, 'Париж', 3),
(4, 'Рим', 4),
(5, 'Мадрид', 5);
INSERT INTO TourTypes (TypeID, TypeName) VALUES
(1, 'Экскурсионный'),
(2, 'Загородный'),
(3, 'Тематический'),
(4, 'Деловой'),
(5, 'Пляжный');
-- Заполнение таблицы туров
INSERT INTO Tours (TourID, TourName, CityID, TypeID, Price, DurationDays) VALUES
(1, 'Обзорная экскурсия по Москве', 1, 1, 15000, 3),
(2, 'Деловой тур в Берлин', 2, 4, 16000, 4),
(3, 'Тематический тур в Париж', 3, 3, 17000, 5),
(4, 'Загородный тур около Рима', 4, 2, 18000, 6),
(5, 'Пляжный отдых в Сочи', 5, 5, 19000, 7);
-- Заполнение таблицы клиентов
INSERT INTO Clients (ClientID, FirstName, LastName, Email) VALUES
(1, 'Иван', 'Иванов', 'ivan@example.com'),
(2, 'Иван', 'Петров', 'ivan2@example.com'),
(3, 'Иван', 'Сидоров', 'ivan3@example.com'),
(4, 'Мария', 'Александрова', 'maria@example.com'),
(5, 'Мария', 'Смирнова', 'maria2@example.com');
-- Заполнение таблицы бронирований
INSERT INTO Bookings (BookingID, ClientID, TourID, BookingDate, Status) VALUES
(1, 1, 1, '2024-05-20', 'Confirmed'),
(2, 2, 2, '2024-05-21', 'Pending'),
(3, 3, 3, '2024-05-22', 'Pending'),
(4, 4, 4, '2024-05-23', 'Confirmed'),
(5, 5, 5, '2024-05-24', 'Pending');

#3
#Переходим к основовной задаче
#Спроектировать веб-приложение с использованием Delphi 10.2, IIS и MS SQL Server.(Для выполнения данной задачи было приянто решение -
#использовать Python и PostgreSQL бесплатны и просты в освоении Все ключевые элементы реализованы: База данных (PostgreSQL), REST API (Flask),Интерфейс (HTML/JS).)
#Тема веб-приложения
#Система бронирования туров

#Функционал:
#Просмотр доступных туров.
#Бронирование туров.
#Регистрация/авторизация пользователей.
#Управление заказами.
#Технологии:

#PostgreSQL — для хранения данных (уже знакома из кейса 3).
#Python (Flask/FastAPI) — для создания REST API (сам код пишу в jupiter notebook(anaconda) - удобно использовать и тестировать).
#HTML/CSS/JS — для интерфейса (простой статический сайт).
#IIS — для размещения приложения (или можно использовать локальный сервер).

#Для начала устанавлю Flask
pip install flask flask-sqlalchemy flask-cors psycopg2-binary

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
import threading
import time  # Добавленный импорт time

# Создайте Flask-приложение
app = Flask(__name__)
CORS(app)

# Настройка PostgreSQL
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:postgres@localhost/tourism_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Инициализация SQLAlchemy
db = SQLAlchemy(app)

# Модель для таблицы Tours
class Tour(db.Model):
    __tablename__ = 'tours' #имя таблицы
    TourID = db.Column(db.Integer, primary_key=True, name='tourid')  # Сопоставление с tourid
    TourName = db.Column(db.String(255), name='tourname')            # Сопоставление с tourname
    CityID = db.Column(db.Integer, db.ForeignKey('cities.cityid'), name='cityid')  # cities.cityid
    TypeID = db.Column(db.Integer, db.ForeignKey('tourtypes.typeid'), name='typeid')  # tourtypes.typeid
    Price = db.Column(db.Numeric, name='price')
    DurationDays = db.Column(db.Integer, name='durationdays')

class City(db.Model):
    __tablename__ = 'cities'
    CityID = db.Column(db.Integer, primary_key=True, name='cityid')
    CityName = db.Column(db.String(100), name='cityname')
    CountryID = db.Column(db.Integer, db.ForeignKey('countries.countryid'), name='countryid')

class TourType(db.Model):
    __tablename__ = 'tourtypes'
    TypeID = db.Column(db.Integer, primary_key=True, name='typeid')
    TypeName = db.Column(db.String(100), name='typename')

# Создание таблиц в контексте приложения
with app.app_context():
    db.create_all()

#проверка перед запуском сервера
with app.app_context():
    try:
        db.session.query(Tour).first()  # Проверяем подключение
        print("Таблица tours доступна")
    except Exception as e:
        print("Ошибка подключения к БД:", str(e))

#получаю Таблица tours доступна

# Маршрут для получения данных
@app.route('/tours', methods=['GET'])
def get_tours():
    with app.app_context():  # Активация контекста
        try:
            tours = Tour.query.all()
            return jsonify([{'id': t.TourID, 'name': t.TourName, 'price': float(t.Price)} for t in tours])
        except Exception as e:
            return jsonify({"error": str(e)}), 500

# Функция запуска сервера в отдельном потоке
def run_flask():
    app.run(debug=True, port=5000, use_reloader=False) # Отключен перезагрузчик
 
# Запуск сервера в отдельном потоке
thread = threading.Thread(target=run_flask)
thread.daemon = True  # Поток завершится при закрытии Jupyter
thread.start()

# Ждём, пока сервер запустится 2 секунды
time.sleep(2)

#получаю следующее
# * Serving Flask app '__main__'
# * Debug mode: on
#WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
# * Running on http://127.0.0.1:5000
#Press CTRL+C to quit

with app.app_context():
    tours = Tour.query.all()
    print(tours)  # Должно вывести пустой список, если таблица пуста, в моем случае выходит [<Tour 1>, <Tour 2>, <Tour 3>, <Tour 4>, <Tour 5>]

import requests

# Делаем запрос к API
response = requests.get('http://localhost:5000/tours')
print(response.json())

# получаю ответ 127.0.0.1 - - [19/May/2025 15:30:41] "GET /tours HTTP/1.1" 200 -
#[{'id': 1, 'name': 'Обзорная экскурсия по Москве', 'price': 15000.0}, 
#{'id': 2, 'name': 'Деловой тур в Берлин', 'price': 16000.0}, 
#{'id': 3, 'name': 'Тематический тур в Париж', 'price': 17000.0}, 
#{'id': 4, 'name': 'Загородный тур около Рима', 'price': 18000.0}, 
#{'id': 5, 'name': 'Пляжный отдых в Сочи', 'price': 19000.0}]

#ИТОГ:
#PostgreSQL:
#База данных tourism_db работает.
#Таблицы (tours, cities, countries, tourtypes) созданы и заполнены данными.
#Flask API:
#Сервер запущен на порту 5000.
#Метод GET /tours возвращает список туров в формате JSON.
#Тестирование:
#Запрос requests.get('http://localhost:5000/tours') возвращает корректные данные.
